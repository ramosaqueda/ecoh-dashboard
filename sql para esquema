-- Crear el tipo enum para estado de actividad
CREATE TYPE "EstadoActividad" AS ENUM ('inicio', 'en_proceso', 'terminado');

-- Crear tabla para tipos de actividad
CREATE TABLE "TipoActividad" (
    "id" SERIAL NOT NULL,
    "nombre" VARCHAR(100) NOT NULL,
    "descripcion" VARCHAR(500),
    "activo" BOOLEAN NOT NULL DEFAULT true,
    "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "updatedAt" TIMESTAMP(3) NOT NULL,

    CONSTRAINT "TipoActividad_pkey" PRIMARY KEY ("id")
);

-- Crear índice único para el nombre del tipo de actividad
CREATE UNIQUE INDEX "TipoActividad_nombre_key" ON "TipoActividad"("nombre");

-- Crear tabla de actividades
CREATE TABLE "Actividad" (
    "id" SERIAL NOT NULL,
    "causaId" INTEGER NOT NULL,
    "tipoActividadId" INTEGER NOT NULL,
    "fechaInicio" TIMESTAMP(3) NOT NULL,
    "fechaTermino" TIMESTAMP(3) NOT NULL,
    "estado" "EstadoActividad" NOT NULL DEFAULT 'inicio',
    "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "updatedAt" TIMESTAMP(3) NOT NULL,

    CONSTRAINT "Actividad_pkey" PRIMARY KEY ("id")
);

-- Crear índices para mejorar el rendimiento
CREATE INDEX "Actividad_causaId_idx" ON "Actividad"("causaId");
CREATE INDEX "Actividad_tipoActividadId_idx" ON "Actividad"("tipoActividadId");

-- Agregar las restricciones de clave foránea
ALTER TABLE "Actividad" ADD CONSTRAINT "Actividad_causaId_fkey" 
    FOREIGN KEY ("causaId") REFERENCES "Causa"("id") ON DELETE RESTRICT ON UPDATE CASCADE;

ALTER TABLE "Actividad" ADD CONSTRAINT "Actividad_tipoActividadId_fkey" 
    FOREIGN KEY ("tipoActividadId") REFERENCES "TipoActividad"("id") ON DELETE RESTRICT ON UPDATE CASCADE;

-- Crear función para actualizar automáticamente updatedAt
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW."updatedAt" = CURRENT_TIMESTAMP;
    RETURN NEW;
END;
$$ language 'plpgsql';

-- Crear triggers para mantener actualizados los campos updatedAt
CREATE TRIGGER update_tipoactividad_updated_at
    BEFORE UPDATE ON "TipoActividad"
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_actividad_updated_at
    BEFORE UPDATE ON "Actividad"
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();


    -- Crear tabla Area
CREATE TABLE "Area" (
    "id" SERIAL PRIMARY KEY,
    "nombre" VARCHAR(255) NOT NULL UNIQUE,
    "descripcion" TEXT,
    "activo" BOOLEAN NOT NULL DEFAULT true,
    "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "updatedAt" TIMESTAMP(3) NOT NULL
);

-- Crear índice para búsquedas por nombre
CREATE INDEX "Area_nombre_idx" ON "Area"("nombre");

-- Agregar columna areaId a TipoActividad
ALTER TABLE "TipoActividad"
ADD COLUMN "areaId" INTEGER NOT NULL;

-- Agregar foreign key
ALTER TABLE "TipoActividad"
ADD CONSTRAINT "TipoActividad_areaId_fkey"
FOREIGN KEY ("areaId") REFERENCES "Area"(id)
ON DELETE RESTRICT ON UPDATE CASCADE;

-- Crear índice para la relación
CREATE INDEX "TipoActividad_areaId_idx" ON "TipoActividad"("areaId");

-- Insertar áreas iniciales
INSERT INTO "Area" (nombre, descripcion, "updatedAt") VALUES
('Análisis', 'Área de análisis de información', CURRENT_TIMESTAMP),
('Jurídica', 'Área jurídica y legal', CURRENT_TIMESTAMP),
('Proteccional', 'Área de protección', CURRENT_TIMESTAMP);


-- Agregar columna usuarioId a la tabla Actividad
ALTER TABLE "Actividad" 
ADD COLUMN "usuarioId" INTEGER NOT NULL;

-- Agregar la foreign key
ALTER TABLE "Actividad"
ADD CONSTRAINT "Actividad_usuarioId_fkey"
FOREIGN KEY ("usuarioId") REFERENCES "usuarios"(id)
ON DELETE RESTRICT ON UPDATE CASCADE;

-- Crear índice para la relación
CREATE INDEX "Actividad_usuarioId_idx" ON "Actividad"("usuarioId");


-- nuevo esquema para relaciones causa y organizaciones.

-- Crear la tabla CausaOrganizacion
CREATE TABLE "CausaOrganizacion" (
  "id" SERIAL PRIMARY KEY,
  "organizacionId" INTEGER NOT NULL,
  "causaId" INTEGER NOT NULL,
  "fechaAsociacion" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
  "observacion" TEXT,
  "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
  "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
  
  -- Añadir restricción de unicidad
  CONSTRAINT "CausaOrganizacion_organizacionId_causaId_unique" UNIQUE ("organizacionId", "causaId")
);

-- Crear índices para mejorar el rendimiento
CREATE INDEX "CausaOrganizacion_causaId_idx" ON "CausaOrganizacion"("causaId");
CREATE INDEX "CausaOrganizacion_organizacionId_idx" ON "CausaOrganizacion"("organizacionId");

-- Añadir claves foráneas
ALTER TABLE "CausaOrganizacion" 
  ADD CONSTRAINT "CausaOrganizacion_organizacionId_fkey" 
  FOREIGN KEY ("organizacionId") 
  REFERENCES "OrganizacionDelictual"("id") 
  ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE "CausaOrganizacion" 
  ADD CONSTRAINT "CausaOrganizacion_causaId_fkey" 
  FOREIGN KEY ("causaId") 
  REFERENCES "Causa"("id") 
  ON DELETE CASCADE ON UPDATE CASCADE;

-- Crear función para actualizar automáticamente la columna updatedAt
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW."updatedAt" = CURRENT_TIMESTAMP;
    RETURN NEW;
END;
$$ language 'plpgsql';

-- Crear trigger para actualizar automáticamente updatedAt
CREATE TRIGGER update_causa_organizacion_updated_at
BEFORE UPDATE ON "CausaOrganizacion"
FOR EACH ROW
EXECUTE FUNCTION update_updated_at_column();